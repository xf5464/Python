客户端资源组织更新有以下几种方式

以下1，2方式都有一个总的version文件，在每次更新的时候生成，所以必须保证程序必须去读正确的version文件，可以生成一个txt，里面可以一个放当前version文件的md5,然后运维读取这个md5写入数据库
在最开始传给客户端，客户端根据这个md5去读取

1.客户端资源读取为  资源根目录(嵌swf的页面传进来) + 相对路径（res/aaa/1.png) + ?version=文件版本，更新文件集合为一个目录，然后运维把生成的更新包去替换拿去替换。如果有多个包生成，要一次更新比较麻烦。

2.客户端资源读取为  资源根目录(嵌swf的页面传进来) + 该次更新文件版本 +相对路径（res/aaa/1.png) ，举个例子，第1次更新有3个文件 a1,a2,a3,那么a1,a2,a3按相对路径放入名为1的文件夹中，如果没更新的时候在jenkins上又点了打包，
假设此时更新的文件为a2,a4,a5,那么a2,a4,a5会放入名为2的文件夹中，因为每次都会更新版本文件，所以这种方式的好处就在于，如果有多次累计的更新包，运维只需要把这些包都放到根目录即可，不好的地方就是会有冗余的多个文件，这个缺点
直觉上觉得可以忍受。

3..客户端资源读取为  资源根目录(嵌swf的页面传进来) + 相对路径（res/aaa/0cc175b9c0f1b6a831c399e269772661.png） 使用md5的方式，这样的话version文件跟1，2不太一样，res/aaa/1.png=>0cc175b9c0f1b6a831c399e269772661,客户端读取的时候
按路径去读取对应资源名字。这种方式好处就在于可以在一定程度上保护下资源



这两个脚本在windows下配合jenkins可以使用，为了增加通用性都在Build.properties,使用环境变量感觉不是很靠谱。